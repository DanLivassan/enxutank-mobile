{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { api } from \"./api\";\napi.interceptors.request.use(function (config) {\n  var token = AsyncStorage.getItem(APP_STORAGE_TOKEN);\n  config.headers.Authorization = \"Bearer \" + token;\n  return config;\n});\nexport var createUser = function createUser(user_data) {\n  return api.post('api/user/create/', user_data).then(function (res) {\n    return {\n      errors: false,\n      data: res.data\n    };\n  }).catch(function (e) {\n    if (e.response) {\n      return {\n        errors: true,\n        data: e.response.data\n      };\n    }\n\n    return {\n      errors: false,\n      data: e\n    };\n  });\n};\nexport var createToken = function createToken(data) {\n  return api.post('api/user/token/', data).then(function (response) {\n    if (response.status == 200) {\n      return response.data;\n    }\n  }).catch(function (e) {\n    if (e.response) {\n      console.log(e.response);\n    }\n  });\n};\nexport var getMe = function getMe() {\n  return _regeneratorRuntime.async(function getMe$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(api.get('api/user/me'));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var updateToken = function updateToken(token) {\n  api.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\n};","map":{"version":3,"sources":["/home/dan/danXCode/mobile/enxutank-mobile/services/auth.js"],"names":["api","interceptors","request","use","config","token","AsyncStorage","getItem","APP_STORAGE_TOKEN","headers","Authorization","createUser","user_data","post","then","res","errors","data","catch","e","response","createToken","status","console","log","getMe","get","updateToken","defaults","common"],"mappings":";AAAA,SAASA,GAAT;AACAA,GAAG,CAACC,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA6B,UAACC,MAAD,EAAY;AACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBC,iBAArB,CAAd;AACAJ,EAAAA,MAAM,CAACK,OAAP,CAAeC,aAAf,eAAyCL,KAAzC;AACA,SAAOD,MAAP;AACH,CAJD;AAKA,OAAO,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAACC,SAAD,EAAe;AAErC,SAAOZ,GAAG,CAACa,IAAJ,CAAS,kBAAT,EAA6BD,SAA7B,EAAwCE,IAAxC,CAA6C,UAAAC,GAAG,EAAI;AACvD,WAAO;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,IAAI,EAAEF,GAAG,CAACE;AAA3B,KAAP;AACH,GAFM,EAEJC,KAFI,CAEE,UAAAC,CAAC,EAAI;AACV,QAAIA,CAAC,CAACC,QAAN,EAAgB;AACZ,aAAO;AAAEJ,QAAAA,MAAM,EAAE,IAAV;AAAgBC,QAAAA,IAAI,EAAEE,CAAC,CAACC,QAAF,CAAWH;AAAjC,OAAP;AACH;;AACD,WAAO;AAAED,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,IAAI,EAAEE;AAAvB,KAAP;AAEH,GARM,CAAP;AASH,CAXM;AAaP,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACJ,IAAD,EAAU;AACjC,SAAOjB,GAAG,CAACa,IAAJ,CAAS,iBAAT,EAA4BI,IAA5B,EAAkCH,IAAlC,CAAuC,UAAAM,QAAQ,EAAI;AACtD,QAAIA,QAAQ,CAACE,MAAT,IAAmB,GAAvB,EAA4B;AACxB,aAAOF,QAAQ,CAACH,IAAhB;AACH;AACJ,GAJM,EAIJC,KAJI,CAIE,UAAAC,CAAC,EAAI;AACV,QAAIA,CAAC,CAACC,QAAN,EAAgB;AACZG,MAAAA,OAAO,CAACC,GAAR,CAAYL,CAAC,CAACC,QAAd;AACH;AACJ,GARM,CAAP;AASH,CAVM;AAYP,OAAO,IAAMK,KAAK,GAAG,SAARA,KAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACJzB,GAAG,CAAC0B,GAAJ,CAAQ,aAAR,CADI;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;AAIP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACtB,KAAD,EAAW;AAClCL,EAAAA,GAAG,CAAC4B,QAAJ,CAAanB,OAAb,CAAqBoB,MAArB,CAA4B,eAA5B,gBAAyDxB,KAAzD;AACH,CAFM","sourcesContent":["import { api } from './api';\napi.interceptors.request.use((config) => {\n    const token = AsyncStorage.getItem(APP_STORAGE_TOKEN)\n    config.headers.Authorization = `Bearer ${token}`\n    return config\n})\nexport const createUser = (user_data) => {\n\n    return api.post('api/user/create/', user_data).then(res => {\n        return { errors: false, data: res.data };\n    }).catch(e => {\n        if (e.response) {\n            return { errors: true, data: e.response.data }\n        }\n        return { errors: false, data: e }\n\n    })\n}\n\nexport const createToken = (data) => {\n    return api.post('api/user/token/', data).then(response => {\n        if (response.status == 200) {\n            return response.data\n        }\n    }).catch(e => {\n        if (e.response) {\n            console.log(e.response)\n        }\n    })\n}\n\nexport const getMe = async () => {\n    return await api.get('api/user/me')\n}\n\nexport const updateToken = (token) => {\n    api.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n}"]},"metadata":{},"sourceType":"module"}