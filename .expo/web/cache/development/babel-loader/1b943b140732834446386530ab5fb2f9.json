{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport * as authService from \"../services/auth\";\nimport { APP_STORAGE_TOKEN } from \"../constants/user.constants\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar UserContext = createContext({\n  user: null\n});\nexport var UserProvider = function UserProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState({\n    name: {}\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      token = _useState4[0],\n      setToken = _useState4[1];\n\n  var performLogin = function performLogin(_ref2) {\n    var email = _ref2.email,\n        password = _ref2.password;\n\n    var f = function f() {\n      var res, _user;\n\n      return _regeneratorRuntime.async(function f$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(authService.createToken({\n                email: email,\n                password: password\n              }));\n\n            case 2:\n              res = _context.sent;\n              console.log(res);\n\n              if (!res.token) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.prev = 5;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem(APP_STORAGE_TOKEN, res.token));\n\n            case 8:\n              authService.updateToken(res.token);\n              setToken(res.token);\n              console.log(token);\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(authService.getMe());\n\n            case 13:\n              _user = _context.sent;\n              setUser(_user);\n              return _context.abrupt(\"return\", true);\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](5);\n              return _context.abrupt(\"return\", false);\n\n            case 21:\n              return _context.abrupt(\"return\", false);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[5, 18]], Promise);\n    };\n\n    f();\n  };\n\n  var performLogout = function performLogout() {\n    AsyncStorage.clear().then(function () {\n      setUser({\n        name: \"\"\n      });\n      setToken(null);\n    });\n  };\n\n  useEffect(function () {\n    var f = function f() {\n      var token;\n      return _regeneratorRuntime.async(function f$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(APP_STORAGE_TOKEN));\n\n            case 2:\n              token = _context2.sent;\n              authService.updateToken(token);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    f();\n  }, []);\n  return _jsx(UserContext.Provider, {\n    value: {\n      performLogin: performLogin,\n      user: user,\n      token: token,\n      setToken: setToken,\n      performLogout: performLogout\n    },\n    children: children\n  });\n};\nexport function useAuth() {\n  var context = useContext(UserContext);\n  return context;\n}","map":{"version":3,"sources":["/home/dan/danXCode/mobile/enxutank-mobile/context/auth.context.js"],"names":["createContext","useContext","useEffect","useState","authService","APP_STORAGE_TOKEN","AsyncStorage","UserContext","user","UserProvider","children","name","setUser","token","setToken","performLogin","email","password","f","createToken","res","console","log","setItem","updateToken","getMe","performLogout","clear","then","getItem","useAuth","context"],"mappings":"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","sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\nimport * as authService from '../services/auth';\nimport { APP_STORAGE_TOKEN } from '../constants/user.constants';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst UserContext = createContext({ user: null })\n\nexport const UserProvider = ({ children }) => {\n    const [user, setUser] = useState({ name: {} })\n    const [token, setToken] = useState(null)\n\n    const performLogin = ({ email, password }) => {\n        const f = async () => {\n            const res = await authService.createToken({ email, password })\n            console.log(res)\n            if (res.token) {\n                try {\n                    await AsyncStorage.setItem(APP_STORAGE_TOKEN, res.token);\n                    authService.updateToken(res.token);\n                    setToken(res.token)\n                    console.log(token)\n                    const user = await authService.getMe()\n                    setUser(user)\n                    return true\n                }\n                catch (e) {\n                    return false\n                }\n            }\n            return false\n\n        }\n        f()\n    }\n\n    const performLogout = () => {\n        AsyncStorage.clear().then(() => {\n            setUser({ name: \"\" });\n            setToken(null);\n        });\n    }\n\n    useEffect(() => {\n        const f = async () => {\n            const token = await AsyncStorage.getItem(APP_STORAGE_TOKEN)\n            authService.updateToken(token)\n        }\n        f();\n    }, [])\n\n    return (\n        <UserContext.Provider\n            value={{\n                performLogin,\n                user,\n                token,\n                setToken,\n                performLogout,\n            }}\n        >\n            {children}\n        </UserContext.Provider>\n    );\n}\n\nexport function useAuth() {\n    const context = useContext(UserContext);\n    return context;\n}"]},"metadata":{},"sourceType":"module"}